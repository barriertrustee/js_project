const board=document.querySelector(".board"),controlBoard=document.querySelector(".control-board"),playButton=document.querySelector(".play"),nextButton=document.querySelector(".next"),stopButton=document.querySelector(".stop"),resetButton=document.querySelector(".reset");let raf;function settingUp(numberOfRows=new Number,numberOfColumns=new Number,board=new Element,controlBoard=new Element){let gameGrid=[];for(let i=0;i<numberOfRows*numberOfColumns;i++){let button=document.createElement("button");board.appendChild(button)}board.style.gridTemplateColumns=`repeat(${numberOfColumns}, 1fr)`,board.style.gridTemplateRows=`repeat(${numberOfRows}, 1fr)`;let boardHeight=getComputedStyle(board).height;controlBoard.style.height=`calc(100vh - ${boardHeight})`;const buttons=Array.from(document.querySelectorAll(".board button"));for(let i=0;i<numberOfRows;i++){let row=[];for(let j=0;j<numberOfColumns;j++){let obj={element:buttons[i*numberOfColumns+j],rowIndex:i,colIndex:j,isAlive:!1};row.push(obj)}gameGrid.push(row)}return gameGrid}let numberOfColumns=175,numberOfRows=70,gameGrid=settingUp(numberOfRows,numberOfColumns,board,controlBoard);function checkingNeighbor(obj={},gridMap=[]){let pos_col=obj.colIndex,pos_row=obj.rowIndex;gridMap[-1]=gridMap[numberOfRows-1],gridMap[numberOfRows]=gridMap[0],gridMap.forEach(row=>{row[-1]=row[numberOfColumns-1],row[numberOfColumns]=row[0]});let neighbors=[gridMap[pos_row-1][pos_col-1],gridMap[pos_row-1][pos_col],gridMap[pos_row-1][pos_col+1],gridMap[pos_row][pos_col-1],gridMap[pos_row][pos_col+1],gridMap[pos_row+1][pos_col-1],gridMap[pos_row+1][pos_col],gridMap[pos_row+1][pos_col+1]],isAliveArr;return neighbors=neighbors.filter(obj1=>void 0!==obj1),neighbors.filter(obj1=>!0===obj1.isAlive).length}function cancelRaf(){window.cancelAnimationFrame(raf),gameGrid.forEach(row=>{row.forEach(obj=>{obj.element.disabled=!1})}),resetButton.disabled=!1,nextButton.disabled=!1,playButton.disabled=!1}gameGrid.forEach(row=>{row.forEach(obj=>{obj.element.addEventListener("click",_e=>!0===obj.isAlive?(obj.isAlive=!1,void(obj.element.style.backgroundColor="")):!1===obj.isAlive?(obj.isAlive=!0,void(obj.element.style.backgroundColor="black")):void 0)})}),playButton.addEventListener("click",()=>{function play(){if(gameGrid.every(row=>row.every(obj=>!1===obj.isAlive)))return void cancelRaf();let prevGameGrid=JSON.parse(JSON.stringify(gameGrid));gameGrid.forEach(row=>{row.forEach(obj=>{let aliveNeighbors=checkingNeighbor(obj,prevGameGrid);switch(obj.isAlive){case!0:if(aliveNeighbors>=2&&aliveNeighbors<=3)break;obj.isAlive=!1,obj.element.style.backgroundColor="";break;case!1:if(3===aliveNeighbors){obj.isAlive=!0,obj.element.style.backgroundColor="black";break}}})});let doesNotChange=gameGrid.every(row=>row.every(obj=>obj.isAlive===prevGameGrid[obj.rowIndex][obj.colIndex].isAlive));console.log(doesNotChange),doesNotChange?cancelRaf():raf=window.requestAnimationFrame(play)}gameGrid.forEach(row=>{row.forEach(obj=>{obj.element.disabled=!0})}),playButton.disabled=!0,nextButton.disabled=!0,resetButton.disabled=!0,raf=window.requestAnimationFrame(play)}),nextButton.addEventListener("click",()=>{function play(){let prevGameGrid=JSON.parse(JSON.stringify(gameGrid));gameGrid.forEach(row=>{row.forEach(obj=>{let aliveNeighbors=checkingNeighbor(obj,prevGameGrid);switch(obj.isAlive){case!0:if(aliveNeighbors>=2&&aliveNeighbors<=3)break;obj.isAlive=!1,obj.element.style.backgroundColor="";break;case!1:if(3===aliveNeighbors){obj.isAlive=!0,obj.element.style.backgroundColor="black";break}}})})}play()}),stopButton.addEventListener("click",()=>{cancelRaf()}),resetButton.addEventListener("click",()=>{gameGrid.forEach(row=>{row.forEach(obj=>{obj.element.style.backgroundColor="",obj.isAlive=!1})})});